document.getElementById("editUsersBtn").addEventListener("click", function() {
    document.getElementById("usrs").classList.toggle("hidden");
    loadUsers();
});

function loadUsers() {
    fetch("../php/user_management.php", { method: "GET" })
        .then(response => response.json())
        .then(data => {
            //console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data); // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            
            if (!Array.isArray(data)) {
                throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º");
            }

            let usersList = document.getElementById("users-list");
            usersList.innerHTML = "";
            data.forEach(user => {
                let row = document.createElement("tr");
                row.innerHTML = `
                    <td>${user.id}</td>
                    <td contenteditable="true" data-field="email">${user.email}</td>
                    <td contenteditable="true" data-field="login">${user.login}</td>
                    <td contenteditable="true" data-field="name">${user.name}</td>
                    <td contenteditable="true" data-field="second_name">${user.second_name}</td>
                    <td contenteditable="true" data-field="birth_date">${user.birth_date}</td>
                    <td contenteditable="true" data-field="isAdmin">${user.isAdmin}</td>
                    <td>
                        <button onclick="updateUser(${user.id}, this)">üíæ</button>
                        <button onclick="deleteUser(${user.id})">‚ùå</button>
                    </td>
                `;
                usersList.appendChild(row);
            });
        })
        .catch(error => console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error));
}

function updateUser(id, button) {
    let row = button.parentElement.parentElement;
    let updatedData = {};
    row.querySelectorAll("[contenteditable=true]").forEach(cell => {
        updatedData[cell.dataset.field] = cell.innerText;
    });
    fetch("../php/user_management.php", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, ...updatedData })
    }).then(response => response.text())
      .then(result => alert("–û–±–Ω–æ–≤–ª–µ–Ω–æ: " + result))
      .catch(error => console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", error));
}

function deleteUser(id) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?")) return;
    fetch("../php/user_management.php", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id })
    }).then(response => response.text())
      .then(result => {
          alert("–£–¥–∞–ª–µ–Ω–æ: " + result);
          loadUsers();
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error));
}

document.getElementById("addUserBtn").addEventListener("click", function() {
    let newUser = {
        email: prompt("Email:"),
        login: prompt("–õ–æ–≥–∏–Ω:"),
        password: prompt("–ü–∞—Ä–æ–ª—å:"),
        name: prompt("–ò–º—è:"),
        second_name: prompt("–§–∞–º–∏–ª–∏—è:"),
        birth_date: prompt("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD):"),
        isAdmin: prompt("–ê–¥–º–∏–Ω? (0 –∏–ª–∏ 1):")
    };
    fetch("../php/user_management.php", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newUser)
    }).then(response => response.text())
      .then(result => {
          alert("–î–æ–±–∞–≤–ª–µ–Ω–æ: " + result);
          loadUsers();
      })
      .catch(error => console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", error));
});

function changePassword(userId) {
    let newPassword = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:");
    if (!newPassword) return;

    fetch("../php/user_management.php", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: userId, password: newPassword })
    })
    .then(response => response.json())
    .then(result => {
        alert(result.status === "success" ? "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω" : "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
    })
    .catch(error => console.error("–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è:", error));
}

function addPasswordChangeButton() {
    document.querySelectorAll("#users-list tr").forEach(row => {
        if (row.dataset.hasButton) return; // –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        
        let userId = row.children[0]?.innerText;
        if (!userId) return;
        
        let actionsCell = row.children[row.children.length - 1];
        let passwordButton = document.createElement("button");
        passwordButton.innerText = "üîë";
        passwordButton.onclick = () => changePassword(userId);
        actionsCell.appendChild(passwordButton);
        
        row.dataset.hasButton = true;
    });
}

document.addEventListener("DOMContentLoaded", () => {
    addPasswordChangeButton();
    
    // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏, —Å–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    const observer = new MutationObserver(addPasswordChangeButton);
    observer.observe(document.getElementById("users-list"), { childList: true, subtree: true });
});


// –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
//document.addEventListener("DOMContentLoaded", loadUsers);
